{"version":3,"sources":["Components/LoginPage.js","Components/TodoList.js","Components/Todoitem.js","Components/Auth.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","props","handleEmail","e","setState","email","target","value","handlePassword","passWord","mySubmitHandler","preventDefault","storedUsers","JSON","parse","localStorage","getItem","i","length","user","UserId","userName","isLogin","state","password","userId","name","loggedUser","loggedUserName","loggedUseId","alert","this","to","pathname","className","Form","onSubmit","FormGroup","Label","htmlFor","type","onChange","placeholder","id","required","Component","TodoList","todos","deleteItem","updateitem","isCompleted","handleClearCompleted","newTodo","filter","todo","LoggedUserId","map","key","disabled","completed","task","checked","style","cursor","icon","onClick","TodoItem","handleInput","currentTodo","addTodo","location","newTodoObject","Date","now","Todos","filteredTodos","text","logOut","history","push","todoListState","setItem","stringify","localTodoArray","float","margin","withRouter","Login","cb","library","add","faTrash","App","users","currentPathname","currentSearch","listen","newLocation","action","search","go","exact","path","render","component","react","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90c285a2.chunk.js","sourcesContent":["import React , { Component} from 'react';\r\nimport {Form,FormGroup, Label } from 'reactstrap';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nclass LoginPage extends Component{\r\n\r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                loggedUser: {\r\n                    loggedUserName : '',\r\n                    loggedUseId : ''\r\n                },\r\n                email : '',\r\n                passWord : '',\r\n                isLogin : false \r\n            }\r\n           \r\n        }\r\n        \r\n        \r\n\r\n        handleEmail = (e) =>{\r\n            this.setState(\r\n                {\r\n                 email : e.target.value })\r\n                }\r\n\r\n        handlePassword = (e) =>{\r\n            this.setState(\r\n                { \r\n                passWord : e.target.value })\r\n                }\r\n\r\n        \r\n                \r\n           mySubmitHandler = (e) =>\r\n           {\r\n\r\n            e.preventDefault();\r\n             var storedUsers = JSON.parse(localStorage.getItem(\"users\"));\r\n\r\n            for(var i = 0 ; i < storedUsers.length; i++)\r\n                {\r\n                    var user = storedUsers[i];\r\n                    var UserId = \"\";\r\n                    var userName = \"\";\r\n                    var isLogin = false;\r\n                    if( this.state.email == user.email &&  this.state.passWord == user.password)\r\n                        {\r\n                                isLogin = true;\r\n                                UserId= user.userId;\r\n                                userName = user.name;      \r\n                                break;\r\n                        }\r\n    \r\n                  } \r\n                    if(isLogin)\r\n                    {\r\n                        this.setState\r\n                                (\r\n                                    { isLogin : true ,\r\n                                      loggedUser :{\r\n                                      loggedUserName : userName,\r\n                                      loggedUseId : UserId\r\n                                                    }\r\n                                    }\r\n                                )\r\n                    }\r\n                    else{\r\n                        alert(\"Invalid username and password\");\r\n                    }\r\n                             \r\n              \r\n            }\r\n                \r\n            \r\n            \r\n            \r\n\r\n        render(){\r\n            const { isLogin , loggedUser} = this.state\r\n\r\n            if(isLogin){\r\n           \r\n              return  <Redirect to={{\r\n                  pathname : '/TodoItem',\r\n                  state : {loggedUser : loggedUser, isLogin : isLogin }\r\n              }} />\r\n            }\r\n           \r\n            \r\n            \r\n            \r\n            return(\r\n                <div className=\"wrapper\">\r\n\r\n                <Form className=\"LoginPage\" onSubmit={this.mySubmitHandler}>\r\n                    <h1 className=\"Header\">login</h1>\r\n\r\n\r\n                <FormGroup>\r\n                <Label htmlFor=\"email\"> Email</Label>\r\n                <input type=\"email\"  onChange={this.handleEmail} placeholder=\"Enter email\" id=\"email\" required />  \r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                <Label htmlFor=\"password\"> Password</Label>\r\n                <input type=\"password\"  onChange={this.handlePassword}  placeholder=\"Enter password\" id=\"password\" required />  \r\n                </FormGroup>\r\n                <button type=\"submit\" className=\"btn  btn-outline-success my-btn\" >Login</button>\r\n                </Form>\r\n                </div>\r\n            \r\n                \r\n            )\r\n        }\r\n\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst  TodoList = ( {todos , loggedUseId , deleteItem , updateitem , isCompleted, handleClearCompleted} ) =>{\r\n    \r\n    const newTodo = todos.length ?\r\n                    todos.filter(todo =>{\r\n                        return todo.LoggedUserId === loggedUseId\r\n                    } )\r\n                    .map( (todo) => { \r\n                    return (\r\n                    <div className=\"card-body\"  key={todo.id}> \r\n                      <input className=\"lead text-capitalize text-primary\"\r\n                      disabled={todo.completed}\r\n                      type=\"text\"\r\n                      id={todo.id}\r\n                      value={todo.task}\r\n                      onChange={ e =>{ updateitem(e.target.value , todo.id)  }}\r\n                      />\r\n                      <div>\r\n                      <input type=\"checkbox\" className=\"mx-3\"\r\n                      onChange={(e) => isCompleted(e.target.checked, todo.id)}\r\n                     \r\n                      />\r\n                      <span> <FontAwesomeIcon  style={{cursor : 'pointer'}} icon=\"trash\" onClick={ () => deleteItem(todo.id)} /></span>\r\n                      </div>\r\n                        \r\n                    </div>\r\n                    )\r\n                    }) \r\n                    : ( <h1 className=\"text-success \">You dont have todos</h1>)\r\n     \r\n        return (\r\n            <div className=\"TodoList\">\r\n                <div className=\"card \">\r\n                    { newTodo }\r\n                    <div className=\"card-footer\">\r\n                         <button className=\"btn btn-block btn-danger text-capitalize\" onClick={ () => handleClearCompleted() }>Clear list </button>\r\n                    </div>\r\n              </div>\r\n        </div>\r\n            \r\n        )\r\n    \r\n}\r\nexport default TodoList;\r\n","import React , {Component} from 'react';\r\nimport TodoList from './TodoList'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\nclass TodoItem extends Component{\r\n\r\n            constructor(props){\r\n                super(props);\r\n                this.state = {\r\n                    currentTodo: '',\r\n                    Todos : []\r\n                }\r\n                \r\n            }\r\n\r\n            componentDidMount(){\r\n                if(!localStorage.todoListState){  \r\n                    localStorage.setItem('todoListState',JSON.stringify(this.state.Todos));\r\n  \r\n                } \r\n                   const localTodoArray = JSON.parse(localStorage.todoListState);\r\n                   this.setState({\r\n                    Todos :  localTodoArray\r\n                   }) \r\n\r\n\r\n            }\r\n\r\n            componentDidUpdate(){\r\n                localStorage.setItem('todoListState',JSON.stringify(this.state.Todos));            \r\n            }\r\n\r\n\r\n            handleInput = (e) =>{    \r\n                this.setState( {\r\n                    currentTodo: e.target.value\r\n                })\r\n\r\n            }\r\n\r\n             addTodo = (e) =>{    \r\n                const {loggedUserName, loggedUseId }  =   this.props.location.state.loggedUser;\r\n                                 \r\n                e.preventDefault();\r\n                \r\n                const newTodoObject = {\r\n                   task : this.state.currentTodo,\r\n                   id : Date.now(),\r\n                   completed : false,\r\n                   LoggedUserId : loggedUseId\r\n               }\r\n               if(newTodoObject.task !== \"\")\r\n               {\r\n               this.setState({\r\n                Todos : [...this.state.Todos , newTodoObject],\r\n                currentTodo : ''\r\n               })\r\n                }\r\n            }\r\n\r\n            deleteItem = (id) =>{\r\n            const filteredTodos =    this.state.Todos.filter(todo => todo.id !== id )\r\n            this.setState({\r\n                Todos : filteredTodos\r\n            })\r\n            }\r\n\r\n            updateitem = (text , id) =>{\r\n                const Todos = this.state.Todos;\r\n                Todos.map( todo =>{\r\n                    if(todo.id === id) todo.task = text;\r\n                })\r\n                this.setState({\r\n                    Todos : Todos \r\n                })\r\n            }\r\n\r\n            isCompleted = (checked,id) =>{\r\n                this.setState({\r\n                    Todos :   [...this.state.Todos].map( todo =>{\r\n                        if(todo.id === id){\r\n                            todo.completed = !todo.completed;\r\n                            return todo;\r\n                        }\r\n                        else return todo;\r\n                    })\r\n                })\r\n            }\r\n\r\n            handleClearCompleted = () =>{\r\n                const {loggedUseId }  =   this.props.location.state.loggedUser;\r\n                this.setState({\r\n                    Todos : [...this.state.Todos].filter( todo =>{\r\n                        if( todo.completed !== true )  return todo;\r\n                        } )\r\n                })\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n                logOut = () =>{\r\n                \r\n                this.props.history.push('/')\r\n                }\r\n\r\n            render(){\r\n            const {loggedUserName, loggedUseId }  =   this.props.location.state.loggedUser;\r\n                \r\n                return(\r\n                    <div className=\"Todoitem\">\r\n                        <div className=\"header\">\r\n                        <h3 style={ { float : 'left', margin: '8px'} }>Welcome <span className=\"text-success text-uppercase\"> {loggedUserName} </span></h3>\r\n                        <button type=\"button\" onClick={ () =>  this.logOut() } style={ { float : 'right', margin: '8px'} } className=\"btn  btn-primary\">LOGOUT</button>\r\n                        <h1>Add Some Todo</h1>       \r\n                        </div>\r\n                        \r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-10 mx-auto col-md-8 mt-4 text-center\">\r\n                                    <div className=\"card card-body my-3\">\r\n                                    {/*Start  Todo input group */}\r\n                                     <form>                                        \r\n                                        <div className=\"input-group\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <div className=\"input-group-text bg-primary text-white\"> \r\n                                                <i className=\"fas fa-book\"></i>\r\n                                                </div>\r\n                                             </div>\r\n                                            <input type=\"text\" \r\n                                            className=\"form-control\"\r\n                                            placeholder=\"add a todo\"\r\n                                            value={this.state.currentTodo}\r\n                                            onChange={this.handleInput}\r\n                                              />\r\n                                        </div>\r\n                                            <button type=\"submit\" \r\n                                            onClick={this.addTodo}\r\n                                            className=\"btn btn-block btn-primary mt-3\">\r\n                                            AddTodo\r\n                                            </button>\r\n                                    </form>\r\n                                    {/*End  Todo input group */}\r\n                                \r\n                                </div>\r\n                            \r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                <div className=\"col-10 mx-auto col-md-8 mt-4 text-center\"> \r\n                  {/* Add item to todolist */}\r\n                  < TodoList todos = {this.state.Todos}\r\n                   loggedUseId={loggedUseId}\r\n                   deleteItem={this.deleteItem}\r\n                   updateitem={this.updateitem} \r\n                   isCompleted={this.isCompleted}\r\n                   handleClearCompleted={this.handleClearCompleted}\r\n                   />\r\n                </div>\r\n                </div>\r\n                              \r\n            </div>\r\n        \r\n\r\n                            \r\n    </div>\r\n     );         \r\n}\r\n}\r\nexport default withRouter(TodoItem);\r\n","class Auth{\r\n\r\nconstructor() {\r\n    this.Login = false;\r\n}\r\n\r\nlogin(cb){\r\n    this.isLogin = true;\r\n    cb();\r\n}\r\n\r\nlogout(cb){\r\n    this.isLogin = false;\r\n    cb();\r\n}\r\n\r\nisLogin(){\r\n    return this.Login;\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default new Auth()","import React , * as react from 'react';\nimport './App.css';\nimport { Route,  withRouter ,Switch , Redirect,  BrowserRouter as Router} from 'react-router-dom';\nimport LoginPage from './Components/LoginPage'\nimport TodoItem from './Components/Todoitem'\nimport { ProtectedRoute } from \"./Components/ProtectedRoute\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass  App extends react.Component {\n\n\n  constructor(props){\n\n    super(props);\n    this.state = {\n            users : [\n        { name: \"rajat\", email : \"rajat12@gmail.com\" , password : 1234, userId: 1 },\n        { name: \"ram\", email : \"ram25@gmail.com\" , password : 1987, userId: 2 },\n        { name: \"mohan\", email : \"mohan1@gmail.com\" , password : 7896, userId: 3 }\n        \n    ],\n        isLogin : false\n    }\n    // Store the previous pathname and search strings\n    this.currentPathname = null;\n    this.currentSearch = null;\n  \n    \n}\n\n      componentDidMount(){\n        this.setState(\n          localStorage.setItem(\"users\",JSON.stringify(this.state.users))\n      )\n      const { history } = this.props;\n\n    history.listen((newLocation, action) => {\n      if (action === \"PUSH\") {\n        if (\n          newLocation.pathname !== this.currentPathname ||\n          newLocation.search !== this.currentSearch\n        ) {\n          // Save new location\n          this.currentPathname = newLocation.pathname;\n          this.currentSearch = newLocation.search;\n\n          // Clone location object and push it to history\n          history.push({\n            pathname: newLocation.pathname,\n            search: newLocation.search\n          });\n        }\n      } else {\n        // Send user back if they try to navigate back\n        history.go(1);\n      }\n    });\n\n\n      } \n\n\n     \n     \n          render(){\n          return (\n            <Router>\n              <Route exact path=\"/\" render={() => <LoginPage /> }  />\n               <Route exact path='/todoitem'   component={ () =>  <TodoItem />  }  />\n               {/* <ProtectedRoute exact path='/todoitem' component={TodoItem}  /> */}\n            </Router> \n          );\n        }\n}\n\n\nexport default  withRouter(App);\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router>  <App /> </Router> , document.getElementById('root'));\n\n\n\n\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}